(** Why3 driver for Colibri (with floating point support) *)

prelude ";; produced by local colibri2.drv ;;"
prelude "(set-logic ALL)"
prelude "(set-info :smt-lib-version 2.6)"

filename "%f-%t-%g.psmt2"
unknown "^\\(unknown\\|sat\\|Fail\\)$" "\\1"
unknown "^(:reason-unknown \\([^)]*\\))$" "\\1"
time "why3cpulimit time : %s s"
valid "^unsat$"
steplimitexceeded "steplimitreached"
steps "^(steps \\([0-9]+.?[0-9]*\\))" 1

printer "smtv2.6par"


(* Performed introductions depending on whether counterexamples are
   requested, as said by the meta "get_counterexmp". When this meta
   set, this transformation introduces the model variables that are
   still embedded in the goal. When it is not set, it removes all
   these unused-ce-related variables, even in the context.  *)
transformation "counterexamples_dependent_intros"

transformation "monomorphise_goal"
transformation "eliminate_builtin"
transformation "compile_match"
(* transformation "inline_trivial" *)
transformation "simplify_formula"
transformation "eliminate_inductive"
transformation "eliminate_literal"
transformation "eliminate_epsilon"


theory BuiltIn
  syntax type int   "Int"
  syntax type real  "Real"
  syntax predicate (=)  "(= %1 %2)"
end

theory Ignore
  syntax predicate ignore'term  "true"
end

theory int.Int

  prelude ";;; SMT-LIB2: integer arithmetic"

  syntax function zero "0"
  syntax function one  "1"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function (*)  "(* %1 %2)"
  syntax function (-_) "(- %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop MulComm.Comm
  remove prop MulAssoc.Assoc
  remove prop Unit_def_l
  remove prop Unit_def_r
  remove prop Inv_def_l
  remove prop Inv_def_r
  remove prop Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm
  remove prop Unitary
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop CompatOrderMult
  remove prop ZeroLessOne

end

theory real.Real

  prelude ";;; SMT-LIB2: real arithmetic"

  syntax function zero "0.0"
  syntax function one  "1.0"

  syntax function (+)  "(+ %1 %2)"
  syntax function (-)  "(- %1 %2)"
  syntax function (*)  "(* %1 %2)"
  syntax function (/)  "(/ %1 %2)"
  syntax function (-_) "(- %1)"
  syntax function inv  "(/ 1.0 %1)"

  syntax predicate (<=) "(<= %1 %2)"
  syntax predicate (<)  "(< %1 %2)"
  syntax predicate (>=) "(>= %1 %2)"
  syntax predicate (>)  "(> %1 %2)"

  remove prop MulComm.Comm
  remove prop MulAssoc.Assoc
  remove prop Unit_def_l
  remove prop Unit_def_r
  remove prop Inv_def_l
  remove prop Inv_def_r
  remove prop Assoc
  remove prop Mul_distr_l
  remove prop Mul_distr_r
  remove prop Comm
  remove prop Unitary
  remove prop Inverse
  remove prop Refl
  remove prop Trans
  remove prop Antisymm
  remove prop Total
  remove prop NonTrivialRing
  remove prop CompatOrderAdd
  remove prop CompatOrderMult
  remove prop ZeroLessOne

end

theory real.Square
  syntax function sqrt "(colibri_sqrt %1)"

end

theory real.FromInt
  syntax function from_int "(to_real %1)"

  (* remove allprops *)
end

theory real.Abs
  syntax function abs "(colibri_abs_real %1)"
end

theory int.Abs
  syntax function abs "(colibri_abs_int %1)"
end

theory int.EuclideanDivision
  syntax function div "(div %1 %2)"
  syntax function mod "(mod %1 %2)"
end

theory int.ComputerDivision
  syntax function div "(colibri_cdiv %1 %2)"
  syntax function mod "(colibri_crem %1 %2)"
end


(*
theory real.MinMax

  remove allprops
end
*)

theory real.Truncate
  syntax function floor "(to_int %1)"
  syntax function ceil "(- (to_int (- %1)))"

  (* remove allprops *)
end


theory Bool
  syntax type     bool  "Bool"
  syntax function True  "true"
  syntax function False "false"
end

theory bool.Bool
  syntax function andb  "(and %1 %2)"
  syntax function orb   "(or %1 %2)"
  syntax function xorb  "(xor %1 %2)"
  syntax function notb  "(not %1)"
  syntax function implb "(=> %1 %2)"
end

theory bool.Ite
  syntax function ite "(ite %1 %2 %3)"
end

theory HighOrd
  syntax type     (->) "(Array %1 %2)"
  syntax function (@)  "(select %1 %2)"
end

theory map.Map
  syntax function get "(select %1 %2)"
  syntax function set "(store %1 %2 %3)"
end

import "smt-libv2-floats.gen"

theory smtseq.SMTSeq
  syntax type smtseq "(Seq %1)"
  syntax function nth "(seq.nth %1 %2)"
  syntax function len "(seq.len %1)"
  syntax function empty "seq.empty"
  syntax function unit_ "(seq.unit %1)"
  syntax function concat "(seq.++ %1 %2)"
  syntax function extract "(seq.extract %1 %2 %3)"
  syntax function update "(seq.update %1 %2 %3)"

  remove allprops
end

theory smtnseq.NSeq
  syntax type smtnseq "(NSeq %1)"
  syntax function get "(nseq.get %1 %2)"
  syntax function set "(nseq.set %1 %2 %3)"
  syntax function first "(nseq.first %1)"
  syntax function last "(nseq.last %1)"
  syntax function content "(nseq.content %1)"
  syntax function length "(nseq.length %1)"
  syntax function const "(nseq.const %1 %2 %3)"
  syntax function empty "(nseq.empty %1 %2)"
  syntax function concat "(nseq.concat %1 %2)"
  syntax function relocate "(nseq.relocate %1 %2)"
  syntax function slice "(nseq.slice %1 %2 %3)"
  syntax function update "(nseq.update %1 %2)"

  remove allprops
end
